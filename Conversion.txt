Conversion from wave function of sensor TCS3200 to Grayscale
// TCS230 or TCS3200 pins wiring to Arduino
#define S0 4
#define S1 5
#define S2 6
#define S3 7
#define sensorOut 8

// Stores frequency read by the photodiodes
int redFrequency = 0;
int greenFrequency = 0;
int blueFrequency = 0;

// Function to normalize a value
float normalize(float value, float min_val, float max_val) {
  return (value - min_val) / (max_val - min_val);
}

void setup() {
  // Setting the outputs
  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);
  
  // Setting the sensorOut as an input
  pinMode(sensorOut, INPUT);
  
  // Setting frequency scaling to 20%
  digitalWrite(S0, HIGH);
  digitalWrite(S1, LOW);
  
  // Begin serial communication
  Serial.begin(9600);
}

void loop() {
  // Setting RED (R) filtered photodiodes to be read
  digitalWrite(S2, LOW);
  digitalWrite(S3, LOW);
  // Reading the output frequency
  redFrequency = pulseIn(sensorOut, LOW);

  // Setting GREEN (G) filtered photodiodes to be read
  digitalWrite(S2, HIGH);
  digitalWrite(S3, HIGH);
  // Reading the output frequency
  greenFrequency = pulseIn(sensorOut, LOW);

  // Setting BLUE (B) filtered photodiodes to be read
  digitalWrite(S2, LOW);
  digitalWrite(S3, HIGH);
  // Reading the output frequency
  blueFrequency = pulseIn(sensorOut, LOW);

  // Calculate the grayscale value
  float grayscale = 0.299 * redFrequency + 0.587 * greenFrequency + 0.114 * blueFrequency;

  // Normalize the grayscale value (assuming max grayscale value of 255)
  float normalizedGrayscale = normalize(grayscale, 0, 255);

  // Print the normalized grayscale value
  Serial.print("Normalized Grayscale: ");
  Serial.println(normalizedGrayscale);